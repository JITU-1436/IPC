head	1.17;
access;
symbols;
locks
	root:1.17; strict;
comment	@ * @;


1.17
date	2015.12.26.10.38.20;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2015.12.24.18.00.55;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2015.12.24.11.40.45;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2015.12.24.11.28.33;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2015.12.24.08.22.11;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2015.12.24.08.00.18;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2015.12.23.18.25.11;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2015.12.23.17.53.42;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2015.12.23.17.52.55;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2015.12.23.17.42.26;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2015.12.23.17.33.41;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2015.12.23.17.20.47;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2015.12.23.17.18.35;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2015.12.23.17.15.22;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2015.12.23.16.57.18;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2015.12.23.16.23.06;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2015.12.23.16.10.58;	author root;	state Exp;
branches;
next	;


desc
@This is a client program which will generate requests
rfd and wfd taken through CLA are coonvertwd to integer using atoi();
creating request using struct request
@


1.17
log
@This is a requesting client that requests the server.
@
text
@#include<stdio.h>
#include"request.h"

int main(int argc, char *argv[])
{
	struct request req;
	int rfd, wfd, ret, buff, count;

	if(argc != 3)
	{
		printf("Error");
	}
	
	rfd = atoi(argv[1]);
	wfd = atoi(argv[2]);
	printf("rfd = %d\n", rfd);
	printf("wfd = %d\n", wfd);
	
	req.oper = '+';
	req.opr1 = 23;
	req.opr2 = 34;	

	printf("req.oper = %c\n", req.oper);	
	printf("req.opr1 = %d\n", req.opr1);	
	printf("req.opr2 = %d\n", req.opr2);

	ret = write(wfd, &req, sizeof(struct request));
	printf("Wrote %d bytes to wfd\n", ret);

	count = read(rfd, &buff, sizeof(int));
        printf("File: %s Read %d bytes from rfd\n",__FILE__, count);
        printf("File: %s Result recieved = %d\n",__FILE__, buff);
	
}
@


1.16
log
@Client1 sending request and accepting the result from server
@
text
@d8 1
d21 1
a21 2
	req.opr2 = 34;
	
@


1.15
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int rfd, wfd, ret;
d28 6
a33 1
	printf("Wrote %d bytes to wfd\n", ret);	
@


1.14
log
@request written by client1 is read and printed by the server.
@
text
@d6 1
a6 1
	struct request r;
d18 3
a20 3
	r.oper = '+';
	r.opr1 = 23;
	r.opr2 = 34;
d23 3
a25 3
	printf("r.oper = %c\n", r.oper);	
	printf("r.opr1 = %d\n", r.opr1);	
	printf("r.opr2 = %d\n", r.opr2);
d27 1
a27 1
	ret = write(wfd, &r, sizeof(struct request));
@


1.13
log
@*** empty log message ***
@
text
@d18 1
a18 1
	r.oper = 43;
@


1.12
log
@running check
@
text
@d23 1
d26 1
a26 1
	printf("r.oper = %c\n", r.oper);	
@


1.11
log
@*** empty log message ***
@
text
@d22 1
a22 1
	printf("r.oper = %c\n", r.oper);	
d25 1
@


1.10
log
@ret declared
@
text
@d26 1
a26 1
	printf("Wrote %d bytes to wfd", ret);	
@


1.9
log
@wrote to the wfd
@
text
@d7 1
a7 1
	int rfd, wfd;
@


1.8
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int rfd, wfd, tmp;
d22 1
a22 2
	tmp = (char)(r.oper);
	printf("r.oper = %c\n", tmp);	
d24 3
a26 1
	printf("r.opr2 = %d\n", r.opr2);	
@


1.7
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int rfd, wfd;
d18 1
a18 1
	r.oper = +;
d22 2
a23 1
	printf("r.oper = %d\n", r.oper);	
@


1.6
log
@*** empty log message ***
@
text
@d18 1
a18 2
	r.oper = (struct request *)malloc(sizeof(struct request));
	r.oper = "+";
@


1.5
log
@*** empty log message ***
@
text
@d18 1
a18 1
	oper = (struct request *)malloc(sizeof(struct request));
@


1.4
log
@*** empty log message ***
@
text
@d18 1
@


1.3
log
@*** empty log message ***
@
text
@d18 1
a18 1
	r.oper = +;
@


1.2
log
@program formatting made better by adding /n to the printf statement
checking if previous error is removed or not
@
text
@d16 1
a16 1
	printf("rfd = %d\n", wfd);
d18 1
a18 1
	r.oper = "+";
@


1.1
log
@Initial revision
@
text
@d15 2
a16 2
	printf("rfd = %d", rfd);
	printf("rfd = %d", wfd);
d18 1
a18 1
	r.oper = +;
d22 3
a24 3
	printf("r.oper = %d", r.oper);	
	printf("r.opr1 = %d", r.opr1);	
	printf("r.opr2 = %d", r.opr2);	
@
